// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_7f9204b932c8d809
#define INCLUDED_7f9204b932c8d809
#include "maglev/MagLevFunction.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_electricalc_ElectricalCalculator
#include <electricalc/ElectricalCalculator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_11_new,"electricalc.ElectricalCalculator","new",0x2b52b2af,"electricalc.ElectricalCalculator.new","electricalc/ElectriCalc.hx",11,0x928551b7)
HX_LOCAL_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_19_registerMyMethods,"electricalc.ElectricalCalculator","registerMyMethods",0x01376012,"electricalc.ElectricalCalculator.registerMyMethods","electricalc/ElectriCalc.hx",19,0x928551b7)
HX_LOCAL_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_30_registerMyMethods,"electricalc.ElectricalCalculator","registerMyMethods",0x01376012,"electricalc.ElectricalCalculator.registerMyMethods","electricalc/ElectriCalc.hx",30,0x928551b7)
HX_LOCAL_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_41_registerMyMethods,"electricalc.ElectricalCalculator","registerMyMethods",0x01376012,"electricalc.ElectricalCalculator.registerMyMethods","electricalc/ElectriCalc.hx",41,0x928551b7)
HX_LOCAL_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_52_registerMyMethods,"electricalc.ElectricalCalculator","registerMyMethods",0x01376012,"electricalc.ElectricalCalculator.registerMyMethods","electricalc/ElectriCalc.hx",52,0x928551b7)
HX_LOCAL_STACK_FRAME(_hx_pos_5ab5fc09d70a5392_16_registerMyMethods,"electricalc.ElectricalCalculator","registerMyMethods",0x01376012,"electricalc.ElectricalCalculator.registerMyMethods","electricalc/ElectriCalc.hx",16,0x928551b7)
namespace electricalc{

void ElectricalCalculator_obj::__construct( ::maglev::MagLev maglev){
            	HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_11_new)
HXLINE(  12)		this->maglev = maglev;
HXLINE(  13)		this->registerMyMethods();
            	}

Dynamic ElectricalCalculator_obj::__CreateEmpty() { return new ElectricalCalculator_obj; }

void *ElectricalCalculator_obj::_hx_vtable = 0;

Dynamic ElectricalCalculator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ElectricalCalculator_obj > _hx_result = new ElectricalCalculator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ElectricalCalculator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b5fe901;
}

void ElectricalCalculator_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_19_registerMyMethods)
HXLINE(  20)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  21)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  22)			data->push(::maglev::MagLevString_obj::fromString(HX_("ElectricalCalculator.ConvertPhaseAngleToPowerFactor",52,07,09,c4)));
HXLINE(  23)			data->push(::maglev::MagLevString_obj::fromString(HX_("electricalc",5b,65,21,72)));
HXLINE(  24)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  25)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'ElectricalCalculator.ConvertPhaseAngleToPowerFactor' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",2b,de,f0,ef),data);
HXLINE(  26)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  27)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_30_registerMyMethods)
HXLINE(  31)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  32)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  33)			data->push(::maglev::MagLevString_obj::fromString(HX_("ElectricalCalculator.ConvertPowerFactorToPhaseAngle",d8,be,ec,e1)));
HXLINE(  34)			data->push(::maglev::MagLevString_obj::fromString(HX_("electricalc",5b,65,21,72)));
HXLINE(  35)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  36)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'ElectricalCalculator.ConvertPowerFactorToPhaseAngle' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",b1,4e,54,08),data);
HXLINE(  37)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  38)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_41_registerMyMethods)
HXLINE(  42)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  43)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  44)			data->push(::maglev::MagLevString_obj::fromString(HX_("ElectricalCalculator.CalculateSinglePhasePower",b4,9b,8f,23)));
HXLINE(  45)			data->push(::maglev::MagLevString_obj::fromString(HX_("electricalc",5b,65,21,72)));
HXLINE(  46)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  47)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'ElectricalCalculator.CalculateSinglePhasePower' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",d9,60,66,af),data);
HXLINE(  48)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  49)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_52_registerMyMethods)
HXLINE(  53)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  54)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  55)			data->push(::maglev::MagLevString_obj::fromString(HX_("ElectricalCalculator.CalculateThreePhasePower",c6,1c,91,ed)));
HXLINE(  56)			data->push(::maglev::MagLevString_obj::fromString(HX_("electricalc",5b,65,21,72)));
HXLINE(  57)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  58)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'ElectricalCalculator.CalculateThreePhasePower' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",1f,0a,08,0c),data);
HXLINE(  59)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  60)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_5ab5fc09d70a5392_16_registerMyMethods)
HXLINE(  17)		 ::maglev::MagLev bus = this->maglev;
HXLINE(  19)		 ::maglev::MagLev _hx_tmp = this->maglev;
HXDLIN(  19)		_hx_tmp->_hx_register(HX_("ElectricalCalculator.ConvertPhaseAngleToPowerFactor",52,07,09,c4),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_0(bus))));
HXLINE(  30)		 ::maglev::MagLev _hx_tmp1 = this->maglev;
HXDLIN(  30)		_hx_tmp1->_hx_register(HX_("ElectricalCalculator.ConvertPowerFactorToPhaseAngle",d8,be,ec,e1),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(bus))));
HXLINE(  41)		 ::maglev::MagLev _hx_tmp2 = this->maglev;
HXDLIN(  41)		_hx_tmp2->_hx_register(HX_("ElectricalCalculator.CalculateSinglePhasePower",b4,9b,8f,23),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_2(bus))));
HXLINE(  52)		 ::maglev::MagLev _hx_tmp3 = this->maglev;
HXDLIN(  52)		_hx_tmp3->_hx_register(HX_("ElectricalCalculator.CalculateThreePhasePower",c6,1c,91,ed),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_3(bus))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ElectricalCalculator_obj,registerMyMethods,(void))


::hx::ObjectPtr< ElectricalCalculator_obj > ElectricalCalculator_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< ElectricalCalculator_obj > __this = new ElectricalCalculator_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< ElectricalCalculator_obj > ElectricalCalculator_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	ElectricalCalculator_obj *__this = (ElectricalCalculator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ElectricalCalculator_obj), true, "electricalc.ElectricalCalculator"));
	*(void **)__this = ElectricalCalculator_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

ElectricalCalculator_obj::ElectricalCalculator_obj()
{
}

void ElectricalCalculator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ElectricalCalculator);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_END_CLASS();
}

void ElectricalCalculator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
}

::hx::Val ElectricalCalculator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ElectricalCalculator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ElectricalCalculator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ElectricalCalculator_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(ElectricalCalculator_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ElectricalCalculator_obj_sStaticStorageInfo = 0;
#endif

static ::String ElectricalCalculator_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("registerMyMethods",83,b1,0a,b9),
	::String(null()) };

::hx::Class ElectricalCalculator_obj::__mClass;

void ElectricalCalculator_obj::__register()
{
	ElectricalCalculator_obj _hx_dummy;
	ElectricalCalculator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("electricalc.ElectricalCalculator",3d,2f,e2,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ElectricalCalculator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ElectricalCalculator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ElectricalCalculator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ElectricalCalculator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace electricalc
